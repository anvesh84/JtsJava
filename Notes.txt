So please perform operations as 

create table stock
(
	stockid varchar(30) primary key,
	ItemName varchar(30),
	Price numeric(9,2),
	QuantityAvail INT
);

1) Add Stock 

Stock id to be generated automatically like 'S001','S002' etc...

2) Search Stock 

Enter 'S001' it has to print information. 

Create table Orders
(
   OrderId INT,
   StockID varchar(30),
   QtyOrd INT,
   billAmt numeric(9,2)
);

Create Table Amount
(
  Gamt numeric(9,2)
);

insert into amount values(0);

3) Place Order 

OrderID to be generated automatically, as O001, O002, etc...

Once you place an order, first you have to check quantity is available or not, if quantity is not available
then please given message as 'Insufficient Quantity', If quantity available then 

	-> Update the QuantityAvail in the STOCK table {assume he has 10 pens, you purchased 6 then 4 to be there in STOCK)

	-> Bill Amount to be calculated as (QtyOrd * Price) 

	-> Insert Record into Orders Table. 

	-> Amount table treat as CashCounter, in that old amount to be added with new amount. 

	-> Display message as order Placed Successfully...




Stock id to be generated automatically like 'S001','S002' etc...


The heart for maven project is pom.xml file, which contains the list of dependencies. 


Each Dependency contains the following elements as

 <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
<dependency>
		   <groupId>mysql</groupId>
	      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.5</version>
	</dependency>


__________________________________________________________

Preparing resources means,

There are 2 repositories as 

	1) remote repository

	2) local repository 


In this phase, first it checks the relevant jar files are available in the local repository, if available it skips the phase
else it prepares to connect to remote repository to download the jar files. 


____________________________________________________________________________________________________________________


Testing : 


1) Defect : If a tester identifies some mistake known as defect. 

2) Bug : If the programmer accepts the defect, then it is known as bug. 

*** All defects are not bugs, but all bugs are defects ***

3) Error :  If the programmer identifies mistake in code, it is known as error. 

4) Fatal : If client identifies something known as fatal (which is critcal) 



_________________________________________


Assume, we have requirement that Demo class sayHello() metho needs to return value as "Welcome to Junit..."


















